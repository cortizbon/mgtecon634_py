Traceback (most recent call last):
  File "c:\python38\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "c:\python38\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\python38\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\python38\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "c:\python38\lib\asyncio\base_events.py", line 608, in run_until_complete
    return future.result()
  File "c:\python38\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "c:\python38\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\python38\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
X = data.loc[:,'x'].values.reshape(-1, 1)
Y = data.loc[:,'y'].values.reshape(-1, 1)

# Note: this code assumes that the first covariate is continuous.
# Fitting a flexible model on very little data

# selecting only a few data points
subset = np.arange(0,30)
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split


poly = PolynomialFeatures(degree = 10)
X_poly = poly.fit_transform(X)

poly.fit(X_poly, Y)
lin2 = LinearRegression()
lin2.fit(X_poly[0:30], Y[0:30])

x = data['x']
xgrid = np.linspace(min(x),max(x), 1000)

new_data = pd.DataFrame(xgrid, columns=['x'])

yhat = lin2.predict(poly.fit_transform(new_data))

# Visualising the Polynomial Regression results
plt.figure(figsize=(18,6))
sns.scatterplot(data.loc[subset,'x'],data.loc[subset,'y'], color = 'red', label = 'Data')
plt.plot(xgrid, yhat, color = 'green', label = 'Estimate')
plt.title('Example of overfitting')
plt.xlabel('X')
plt.ylabel('Outcome y');
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mTypeError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[4], line 31[0m
[0;32m     29[0m [38;5;66;03m# Visualising the Polynomial Regression results[39;00m
[0;32m     30[0m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m18[39m,[38;5;241m6[39m))
[1;32m---> 31[0m [43msns[49m[38;5;241;43m.[39;49m[43mscatterplot[49m[43m([49m[43mdata[49m[38;5;241;43m.[39;49m[43mloc[49m[43m[[49m[43msubset[49m[43m,[49m[38;5;124;43m'[39;49m[38;5;124;43mx[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43mdata[49m[38;5;241;43m.[39;49m[43mloc[49m[43m[[49m[43msubset[49m[43m,[49m[38;5;124;43m'[39;49m[38;5;124;43my[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43mcolor[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mred[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mlabel[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mData[39;49m[38;5;124;43m'[39;49m[43m)[49m
[0;32m     32[0m plt[38;5;241m.[39mplot(xgrid, yhat, color [38;5;241m=[39m [38;5;124m'[39m[38;5;124mgreen[39m[38;5;124m'[39m, label [38;5;241m=[39m [38;5;124m'[39m[38;5;124mEstimate[39m[38;5;124m'[39m)
[0;32m     33[0m plt[38;5;241m.[39mtitle([38;5;124m'[39m[38;5;124mExample of overfitting[39m[38;5;124m'[39m)

[1;31mTypeError[0m: scatterplot() takes from 0 to 1 positional arguments but 2 were given
TypeError: scatterplot() takes from 0 to 1 positional arguments but 2 were given

