Traceback (most recent call last):
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\sandr\anaconda3\envs\renv\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\sandr\anaconda3\envs\renv\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Available in randomized settings and observational settings with unconfoundedness+overlap

# A list of vectors indicating the left-out subset
n = data.shape[0]
n_folds = 5 

def split(x, f):
    return list(itertools.compress(x, f)), list(itertools.compress(x, (not i for i in f)))

a = range( 1, data.shape[0] )
b = np.sort(np.arange( 1, n+1 ) % n_folds).tolist()
indices = split(a, b)

fmla_xw = "0 + bs(age, df = 3) * w + bs(polviews, df = 3) * w + bs(income, df = 3) * w + bs(educ, df = 3) * w + bs(marital, df = 3) * w + bs(sex, df = 3) * w"

# Preparing data
W = data.loc[ : , treatment].reset_index( drop = True ).copy()
Y = data.loc[ : , outcome].reset_index( drop = True ).copy()

# Matrix of (transformed) covariates used to estimate E[Y|X,W]
fmla_xw = formula(paste("~ 0 +", paste0("bs(", covariates, ", df=3)", "*", treatment, collapse=" + ")))
XW = model_matrix(fmla_xw, data)

# Matrix of (transformed) covariates used to predict E[Y|X,W=w] for each w in {0, 1}
data_1 = data
data_1[,treatment] = 1
XW1 = model_matrix(fmla_xw, data_1)  # setting W=1
data_0 = data
data_0[,treatment] = 0
XW0 = model_matrix(fmla_xw, data_0)  # setting W=0

# Matrix of (transformed) covariates used to estimate and predict e(X) = P[W=1|X]
fmla_x = formula(paste(" ~ 0 + ", paste0("bs(", covariates, ", df=3)", collapse=" + ")))
XX = model_matrix(fmla_x, data)

# (Optional) Not penalizing the main effect (the coefficient on W)
penalty_factor = rep(1, ncol(XW))
penalty_factor[colnames(XW) == treatment] = 0

# Cross-fitted estimates of E[Y|X,W=1], E[Y|X,W=0] and e(X) = P[W=1|X]
mu_hat_1 = rep(NA, n)
mu_hat_0 = rep(NA, n)
e_hat = rep(NA, n)
for (idx in indices) {
  # Estimate outcome model and propensity models
  # Note how cross-validation is done (via cv_glmnet) within cross-fitting! 
  outcome_model = cv_glmnet(x=XW[-idx,], y=Y[-idx], family="gaussian", penalty_factor=penalty_factor)
  propensity_model = cv_glmnet(x=XX[-idx,], y=W[-idx], family="binomial")

  # Predict with cross-fitting
  mu_hat_1[idx] = predict(outcome_model, newx=XW1[idx,], type="response")
  mu_hat_0[idx] = predict(outcome_model, newx=XW0[idx,], type="response")
  e_hat[idx] = predict(propensity_model, newx=XX[idx,], type="response")
}

# Commpute the summand in AIPW estimator
aipw_scores = (mu_hat_1 - mu_hat_0
                + W / e_hat * (Y -  mu_hat_1)
                - (1 - W) / (1 - e_hat) * (Y -  mu_hat_0))

# Tally up results
ate_aipw_est = mean(aipw_scores)
ate_aipw_se = sd(aipw_scores) / sqrt(n)
ate_aipw_tstat = ate_aipw_est / ate_aipw_se
ate_aipw_pvalue = 2*(pnorm(1 - abs(ate_aipw_tstat)))
ate_aipw_results = c(estimate=ate_aipw_est, std_error=ate_aipw_se, t_stat=ate_aipw_tstat, pvalue=ate_aipw_pvalue)
print(ate_aipw_results)
------------------

[1;36m  File [1;32m"C:\Users\sandr\AppData\Local\Temp/ipykernel_9236/4162839966.py"[1;36m, line [1;32m26[0m
[1;33m    data_1[,treatment] = 1[0m
[1;37m           ^[0m
[1;31mSyntaxError[0m[1;31m:[0m invalid syntax

SyntaxError: invalid syntax (Temp/ipykernel_9236/4162839966.py, line 26)

